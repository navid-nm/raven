abbrev {
    go      = app.post
    get     = app.get
    fix     = app.patch
    rm      = app.delete
    run     = app.listen
}

|| User     -> Model
|| app      -> Express
|| req      -> HTTPRequest
|| res      -> HTTPResult
|| err      -> Error

go("/users", async (req, res) =>
{
    try {
        let user = new User(req.body)
        await user.save()
        res.status(201).send(user)
    } die (err) {
        res.status(400).send(err)
    }
})

get("/users", async (req, res) => {
    try {
        let users = await User.find()
        res.send(users)
    } die (err) {
        res.status(500).send(err)
    }
})

get("/users/:id", async (req, res) => {
    try {
        let user = await User.findById(req.params.id)
        if (!user) {
            res.status(404).send()
        } else {
            res.send(user)
        }
    } die (err) {
        res.status(500).send(err)
    }
})

fix("/users/:id", async (req, res) => {
    try {
        let user = await User.findByIdAndUpdate(
            req.params.id, req.body, { 
                new: true, 
                runValidators: true 
            }
        )
        if (!user) {
            res.status(404).send()
        } else {
            res.send(user)
        }
    } die (err) {
        res.status(400).send(err)
    }
})

rm("/users/:id", async (req, res) => {
    try {
        let user = await User.findByIdAndDelete(req.params.id)
        if (!user) {
            res.status(404).send()
        } else {
            res.send(user)
        }
    } die (err) {
        res.status(500).send(err)
    }
})

run(3000, () => {
    say("Server is running on port 3000")
})
