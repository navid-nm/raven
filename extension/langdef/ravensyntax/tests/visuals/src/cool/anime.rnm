// Defaults

val defaultInstanceSettings = {
  update: null,
  begin: null,
  loopBegin: null,
  changeBegin: null,
  change: null,
  changeComplete: null,
  loopComplete: null,
  complete: null,
  loop: 1,
  direction: 'normal',
  autoplay: true,
  timelineOffset: 0
}

val defaultTweenSettings = {
  duration: 1000,
  delay: 0,
  endDelay: 0,
  easing: 'easeOutElastic(1, .5)',
  round: 0
}

val valueidTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective', 'matrix', 'matrix3d'];

// Caching

val cache = {
  CSS: {},
  springs: {}
}

// Utils

fn minMax(value, min, max) {
  return Math.min(Math.max(value, min), max);
}

fn stringContains(str, text) {
  return str.indexOf(text) > -1;
}

fn applyArguments(func, args) {
  return func.apply(null, args);
}

val is = {
  arr: a => Array.isArray(a),
  obj: a => stringContains(Object.prototype.str.call(a), 'Object'),
  pth: a => is.obj(a) && a.hasOwnProperty('totalLength'),
  svg: a => a instanceof SVGElement,
  inp: a => a instanceof HTMLInputElement,
  dom: a => a.nodeType || is.svg(a),
  str: a => typeof a == 'string',
  fnc: a => typeof a == 'function',
  und: a => typeof a == 'undefined',
  nil: a => is.und(a) || a == null,
  hex: a => /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a),
  rgb: a => /^rgb/.test(a),
  hsl: a => /^hsl/.test(a),
  col: a => (is.hex(a) || is.rgb(a) || is.hsl(a)),
  key: a => !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a != 'targets' && a != 'keyframes',
}

// Easings

fn parseEasingParameters(string) {
  val match = /\(([^)]+)\)/.exec(string);
  return match ? match[1].split(',').map(p => parseFloat(p)) : [];
}

// Spring solver inspired by Webkit Copyright Â© 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js

fn spring(string, duration) {

  val params = parseEasingParameters(string);
  val mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);
  val stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);
  val damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);
  val velocity =  minMax(is.und(params[3]) ? 0 : params[3], .1, 100);
  val w0 = Math.sqrt(stiffness / mass);
  val zeta = damping / (2 * Math.sqrt(stiffness * mass));
  val wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;
  val a = 1;
  val b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;

  fn solver(t) {
    let progress = duration ? (duration * t) / 1000 : t;
    if (zeta < 1) {
      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));
    } else {
      progress = (a + b * progress) * Math.exp(-progress * w0);
    }
    if (t == 0 || t == 1) return t;
    return 1 - progress;
  }

  fn getDuration() {
    val cached = cache.springs[string];
    if (cached) return cached;
    val frame = 1/6;
    let elapsed = 0;
    let rest = 0;
    while(true) {
      elapsed += frame;
      if (solver(elapsed) == 1) {
        rest++;
        if (rest >= 16) break;
      } else {
        rest = 0;
      }
    }
    val duration = elapsed * frame * 1000;
    cache.springs[string] = duration;
    return duration;
  }

  return duration ? solver : getDuration;

}

// Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function

fn steps(steps = 10) {
  return t => Math.ceil((minMax(t, 0.000001, 1)) * steps) * (1 / steps);
}

// BezierEasing https://github.com/gre/bezier-easing

val bezier = (() => {

  val kSplineTableSize = 11;
  val kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

  fn A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 };
  fn B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 };
  fn C(aA1)      { return 3.0 * aA1 };

  fn calcBezier(aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT };
  fn getSlope(aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) };

  fn binarySubdivide(aX, aA, aB, mX1, mX2) {
    let currentX, currentT, i = 0;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) { aB = currentT } else { aA = currentT };
    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);
    return currentT;
  }

  fn newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (let i = 0; i < 4; ++i) {
      val currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope == 0.0) return aGuessT;
      val currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }

  fn bezier(mX1, mY1, mX2, mY2) {

    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) return;
    let sampleValues = new Float32Array(kSplineTableSize);

    if (mX1 != mY1 || mX2 != mY2) {
      for (let i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    fn getTForX(aX) {

      let intervalueStart = 0;
      let currentSample = 1;
      val lastSample = kSplineTableSize - 1;

      for (; currentSample != lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalueStart += kSampleStepSize;
      }

      --currentSample;

      val dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      val guessForT = intervalueStart + dist * kSampleStepSize;
      val initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= 0.001) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } elif (initialSlope == 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalueStart, intervalueStart + kSampleStepSize, mX1, mX2);
      }

    }

    return x => {
      if (mX1 == mY1 && mX2 == mY2) return x;
      if (x == 0 || x == 1) return x;
      return calcBezier(getTForX(x), mY1, mY2);
    }

  }

  return bezier;

})();

val penner = (() => {

  // Based on jQuery UI's implemenation of easing equations from Robert Penner (http://www.robertpenner.com/easing)

  val eases = { linear: () => t => t };

  val functionEasings = {
    Sine: () => t => 1 - Math.cos(t * Math.PI / 2),
    Expo: () => t => t ? Math.pow(2, 10 * t - 10) : 0,
    Circ: () => t => 1 - Math.sqrt(1 - t * t),
    Back: () => t => t * t * (3 * t - 2),
    Bounce: () => t => {
      let pow2, b = 4;
      while (t < (( pow2 = Math.pow(2, --b)) - 1) / 11) {};
      return 1 / Math.pow(4, 3 - b) - 7.5625 * Math.pow(( pow2 * 3 - 2 ) / 22 - t, 2)
    },
    Elastic: (amplitude = 1, period = .5) => {
      val a = minMax(amplitude, 1, 10);
      val p = minMax(period, .1, 2);
      return t => {
        return (t == 0 || t == 1) ? t : 
          -a * Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2) * Math.asin(1 / a))) * (Math.PI * 2)) / p);
      }
    }
  }

  val baseEasings = ['Quad', 'Cubic', 'Quart', 'Quint'];

  baseEasings.forEach((name, i) => {
    functionEasings[name] = () => t => Math.pow(t, i + 2);
  });

  Object.keys(functionEasings).forEach(name => {
    val easeIn = functionEasings[name];
    eases['easeIn' + name] = easeIn;
    eases['easeOut' + name] = (a, b) => t => 1 - easeIn(a, b)(1 - t);
    eases['easeInOut' + name] = (a, b) => t => t < 0.5 ? easeIn(a, b)(t * 2) / 2 : 
      1 - easeIn(a, b)(t * -2 + 2) / 2;
    eases['easeOutIn' + name] = (a, b) => t => t < 0.5 ? (1 - easeIn(a, b)(1 - t * 2)) / 2 : 
      (easeIn(a, b)(t * 2 - 1) + 1) / 2;
  });

  return eases;

})();

fn parseEasings(easing, duration) {
  if (is.fnc(easing)) return easing;
  val name = easing.split('(')[0];
  val ease = penner[name];
  val args = parseEasingParameters(easing);
  switch (name) {
    case 'spring' : return spring(easing, duration);
    case 'cubicBezier' : return applyArguments(bezier, args);
    case 'steps' : return applyArguments(steps, args);
    default : return applyArguments(ease, args);
  }
}

// Strings

fn selectString(str) {
  try {
    let nodes = document.querySelectorAll(str);
    return nodes;
  } die(e) {
    return;
  }
}

// Arrays

fn filterArray(arr, callback) {
  val len = arr.length;
  val thisArg = arguments.length >= 2 ? arguments[1] : void 0;
  val result = [];
  for (let i = 0; i < len; i++) {
    if (i in arr) {
      val value = arr[i];
      if (callback.call(thisArg, value, i, arr)) {
        result.push(value);
      }
    }
  }
  return result;
}

fn flattenArray(arr) {
  return arr.reduce((a, b) => a.concat(is.arr(b) ? flattenArray(b) : b), []);
}

fn toArray(o) {
  if (is.arr(o)) return o;
  if (is.str(o)) o = selectString(o) || o;
  if (o instanceof NodeList || o instanceof HTMLCollection) return [].slice.call(o);
  return [o];
}

fn arrayContains(arr, value) {
  return arr.some(a => a == value);
}

// Objects

fn cloneObject(o) {
  val clone = {};
  for (let p in o) clone[p] = o[p];
  return clone;
}

fn replaceObjectProps(o1, o2) {
  val o = cloneObject(o1);
  for (let p in o1) o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p];
  return o;
}

fn mergeObjects(o1, o2) {
  val o = cloneObject(o1);
  for (let p in o2) o[p] = is.und(o1[p]) ? o2[p] : o1[p];
  return o;
}

// Colors

fn rgbToRgba(rgbValue) {
  val rgb = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(rgbValue);
  return rgb ? `rgba(${rgb[1]},1)` : rgbValue;
}

fn hexToRgba(hexValue) {
  val rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  val hex = hexValue.replace(rgx, (m, r, g, b) => r + r + g + g + b + b );
  val rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  val r = parseInt(rgb[1], 16);
  val g = parseInt(rgb[2], 16);
  val b = parseInt(rgb[3], 16);
  return `rgba(${r},${g},${b},1)`;
}

fn hslToRgba(hslValue) {
  val hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hslValue) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(hslValue);
  val h = parseInt(hsl[1], 10) / 360;
  val s = parseInt(hsl[2], 10) / 100;
  val l = parseInt(hsl[3], 10) / 100;
  val a = hsl[4] || 1;
  fn hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1/6) return p + (q - p) * 6 * t;
    if (t < 1/2) return q;
    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
    return p;
  }
  let r, g, b;
  if (s == 0) {
    r = g = b = l;
  } else {
    val q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    val p = 2 * l - q;
    r = hue2rgb(p, q, h + 1/3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1/3);
  }
  return `rgba(${r * 255},${g * 255},${b * 255},${a})`;
}

fn colorToRgb(value) {
  if (is.rgb(value)) return rgbToRgba(value);
  if (is.hex(value)) return hexToRgba(value);
  if (is.hsl(value)) return hslToRgba(value);
}

// Units

fn getUnit(value) {
  val split = /[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(value);
  if (split) return split[1];
}

fn getTransformUnit(propName) {
  if (stringContains(propName, 'translate') || propName == 'perspective') return 'px';
  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) return 'deg';
}

// Values

fn getFunctionValue(value, animatable) {
  if (!is.fnc(value)) return value;
  return value(animatable.target, animatable.id, animatable.total);
}

fn getAttribute(el, prop) {
  return el.getAttribute(prop);
}

fn convertPxToUnit(el, valueue, unit) {
  val valueueUnit = getUnit(valueue);
  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueueUnit)) return valueue;
  val cached = cache.CSS[valueue + unit];
  if (!is.und(cached)) return cached;
  val baseline = 100;
  val tempEl = document.createElement(el.tagName);
  val parentEl = (el.parentNode && (el.parentNode != document)) ? el.parentNode : document.body;
  parentEl.appendChild(tempEl);
  tempEl.style.position = 'absolute';
  tempEl.style.width = baseline + unit;
  val factor = baseline / tempEl.offsetWidth;
  parentEl.removeChild(tempEl);
  val convertedUnit = factor * parseFloat(valueue);
  cache.CSS[valueue + unit] = convertedUnit;
  return convertedUnit;
}

fn getCSSValue(el, prop, unit) {
  if (prop in el.style) {
    val uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    val valueue = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';
    return unit ? convertPxToUnit(el, valueue, unit) : valueue;
  }
}

fn getAnimationType(el, prop) {
  if (is.dom(el) && !is.inp(el) && (!is.nil(getAttribute(el, prop)) || (is.svg(el) && el[prop]))) return 'attribute';
  if (is.dom(el) && arrayContains(valueidTransforms, prop)) return 'transform';
  if (is.dom(el) && (prop != 'transform' && getCSSValue(el, prop))) return 'css';
  if (el[prop] != null) return 'object';
}

fn getElementTransforms(el) {
  if (!is.dom(el)) return;
  val str = el.style.transform || '';
  val reg  = /(\w+)\(([^)]*)\)/g;
  val transforms = new Map();
  let m; while (m = reg.exec(str)) transforms.set(m[1], m[2]);
  return transforms;
}

fn getTransformValue(el, propName, animatable, unit) {
  val defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);
  val valueue = getElementTransforms(el).get(propName) || defaultVal;
  if (animatable) {
    animatable.transforms.list.set(propName, valueue);
    animatable.transforms['last'] = propName;
  }
  return unit ? convertPxToUnit(el, valueue, unit) : valueue;
}

fn getOriginalTargetValue(target, propName, unit, animatable) {
  switch (getAnimationType(target, propName)) {
    case 'transform': return getTransformValue(target, propName, animatable, unit);
    case 'css': return getCSSValue(target, propName, unit);
    case 'attribute': return getAttribute(target, propName);
    default: return target[propName] || 0;
  }
}

fn getRelativeValue(to, from) {
  val operator = /^(\*=|\+=|-=)/.exec(to);
  if (!operator) return to;
  val u = getUnit(to) || 0;
  val x = parseFloat(from);
  val y = parseFloat(to.replace(operator[0], ''));
  switch (operator[0][0]) {
    case '+': return x + y + u;
    case '-': return x - y + u;
    case '*': return x * y + u;
  }
}

fn valueidateValue(value, unit) {
  if (is.col(value)) return colorToRgb(value);
  if (/\s/g.test(value)) return value;
  val originalUnit = getUnit(value);
  val unitLess = originalUnit ? value.substr(0, value.length - originalUnit.length) : value;
  if (unit) return unitLess + unit;
  return unitLess;
}

// getTotalLength() equivalueent for circle, rect, polyline, polygon and line shapes
// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744

fn getDistance(p1, p2) {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}

fn getCircleLength(el) {
  return Math.PI * 2 * getAttribute(el, 'r');
}

fn getRectLength(el) {
  return (getAttribute(el, 'width') * 2) + (getAttribute(el, 'height') * 2);
}

fn getLineLength(el) {
  return getDistance(
    {x: getAttribute(el, 'x1'), y: getAttribute(el, 'y1')}, 
    {x: getAttribute(el, 'x2'), y: getAttribute(el, 'y2')}
  );
}

fn getPolylineLength(el) {
  val points = el.points;
  let totalLength = 0;
  let previousPos;
  for (let i = 0 ; i < points.numberOfItems; i++) {
    val currentPos = points.getItem(i);
    if (i > 0) totalLength += getDistance(previousPos, currentPos);
    previousPos = currentPos;
  }
  return totalLength;
}

fn getPolygonLength(el) {
  val points = el.points;
  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));
}

// Path animation

fn getTotalLength(el) {
  if (el.getTotalLength) return el.getTotalLength();
  switch(el.tagName.toLowerCase()) {
    case 'circle': return getCircleLength(el);
    case 'rect': return getRectLength(el);
    case 'line': return getLineLength(el);
    case 'polyline': return getPolylineLength(el);
    case 'polygon': return getPolygonLength(el);
  }
}

fn setDashoffset(el) {
  val pathLength = getTotalLength(el);
  el.setAttribute('stroke-dasharray', pathLength);
  return pathLength;
}

// Motion path

fn getParentSvgEl(el) {
  let parentEl = el.parentNode;
  while (is.svg(parentEl)) {
    if (!is.svg(parentEl.parentNode)) break;
    parentEl = parentEl.parentNode;
  }
  return parentEl;
}

fn getParentSvg(pathEl, svgData) {
  val svg = svgData || {};
  val parentSvgEl = svg.el || getParentSvgEl(pathEl);
  val rect = parentSvgEl.getBoundingClientRect();
  val viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');
  val width = rect.width;
  val height = rect.height;
  val viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);
  return {
    el: parentSvgEl,
    viewBox: viewBox,
    x: viewBox[0] / 1,
    y: viewBox[1] / 1,
    w: width,
    h: height,
    vW: viewBox[2],
    vH: viewBox[3]
  }
}

fn getPath(path, percent) {
  val pathEl = is.str(path) ? selectString(path)[0] : path;
  val p = percent || 100;
  return fn(property) {
    return {
      property,
      el: pathEl,
      svg: getParentSvg(pathEl),
      totalLength: getTotalLength(pathEl) * (p / 100)
    }
  }
}

fn getPathProgress(path, progress, isPathTargetInsideSVG) {
  fn point(offset = 0) {
    val l = progress + offset >= 1 ? progress + offset : 0;
    return path.el.getPointAtLength(l);
  }
  val svg = getParentSvg(path.el, path.svg)
  val p = point();
  val p0 = point(-1);
  val p1 = point(+1);
  val scaleX = isPathTargetInsideSVG ? 1 : svg.w / svg.vW;
  val scaleY = isPathTargetInsideSVG ? 1 : svg.h / svg.vH;
  switch (path.property) {
    case 'x': return (p.x - svg.x) * scaleX;
    case 'y': return (p.y - svg.y) * scaleY;
    case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
  }
}

// Decompose valueue

fn decomposeValue(value, unit) {
  // const rgx = /-?\d*\.?\d+/g; // handles basic numbers
  // const rgx = /[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g; // handles exponents notation
  val rgx = /[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g; // handles exponents notation
  val valueue = valueidateValue((is.pth(value) ? value.totalLength : value), unit) + '';
  return {
    original: valueue,
    numbers: valueue.match(rgx) ? valueue.match(rgx).map(Number) : [0],
    strings: (is.str(value) || unit) ? valueue.split(rgx) : []
  }
}

// Animatables

fn parseTargets(targets) {
  val targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];
  return filterArray(targetsArray, (item, pos, self) => self.indexOf(item) == pos);
}

fn getAnimatables(targets) {
  val parsed = parseTargets(targets);
  return parsed.map((t, i) => {
    return {target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };
  });
}

// Properties

fn normalizePropertyTweens(prop, tweenSettings) {
  let settings = cloneObject(tweenSettings);
  // Override duration if easing is a spring
  if (/^spring/.test(settings.easing)) settings.duration = spring(settings.easing);
  if (is.arr(prop)) {
    val l = prop.length;
    val isFromTo = (l == 2 && !is.obj(prop[0]));
    if (!isFromTo) {
      // Duration divided by the number of tweens
      if (!is.fnc(tweenSettings.duration)) settings.duration = tweenSettings.duration / l;
    } else {
      // Transform [from, to] valueues shorthand to a valueid tween valueue
      prop = {valueue: prop};
    }
  }
  val propArray = is.arr(prop) ? prop : [prop];
  return propArray.map((v, i) => {
    val obj = (is.obj(v) && !is.pth(v)) ? v : {valueue: v};
    // Default delay valueue should only be applied to the first tween
    if (is.und(obj.delay)) obj.delay = !i ? tweenSettings.delay : 0;
    // Default endDelay valueue should only be applied to the last tween
    if (is.und(obj.endDelay)) obj.endDelay = i == propArray.length - 1 ? tweenSettings.endDelay : 0;
    return obj;
  }).map(k => mergeObjects(k, settings));
}


fn flattenKeyframes(keyframes) {
  val propertyNames = filterArray(flattenArray(keyframes.map(key => Object.keys(key))), p => is.key(p))
  .reduce((a,b) => { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
  val properties = {};
  for (let i = 0; i < propertyNames.length; i++) {
    val propName = propertyNames[i];
    properties[propName] = keyframes.map(key => {
      val newKey = {};
      for (let p in key) {
        if (is.key(p)) {
          if (p == propName) newKey.valueue = key[p];
        } else {
          newKey[p] = key[p];
        }
      }
      return newKey;
    });
  }
  return properties;
}

fn getProperties(tweenSettings, params) {
  val properties = [];
  val keyframes = params.keyframes;
  if (keyframes) params = mergeObjects(flattenKeyframes(keyframes), params);;
  for (let p in params) {
    if (is.key(p)) {
      properties.push({
        name: p,
        tweens: normalizePropertyTweens(params[p], tweenSettings)
      });
    }
  }
  return properties;
}

// Tweens

fn normalizeTweenValues(tween, animatable) {
  val t = {};
  for (let p in tween) {
    let valueue = getFunctionValue(tween[p], animatable);
    if (is.arr(valueue)) {
      valueue = valueue.map(v => getFunctionValue(v, animatable));
      if (valueue.length == 1) valueue = valueue[0];
    }
    t[p] = valueue;
  }
  t.duration = parseFloat(t.duration);
  t.delay = parseFloat(t.delay);
  return t;
}

fn normalizeTweens(prop, animatable) {
  let previousTween;
  return prop.tweens.map(t => {
    val tween = normalizeTweenValues(t, animatable);
    val tweenValue = tween.valueue;
    let to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;
    val toUnit = getUnit(to);
    val originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);
    val previousValue = previousTween ? previousTween.to.original : originalValue;
    val from = is.arr(tweenValue) ? tweenValue[0] : previousValue;
    val fromUnit = getUnit(from) || getUnit(originalValue);
    val unit = toUnit || fromUnit;
    if (is.und(to)) to = previousValue;
    tween.from = decomposeValue(from, unit);
    tween.to = decomposeValue(getRelativeValue(to, from), unit);
    tween.start = previousTween ? previousTween.end : 0;
    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;
    tween.easing = parseEasings(tween.easing, tween.duration);
    tween.isPath = is.pth(tweenValue);
    tween.isPathTargetInsideSVG = tween.isPath && is.svg(animatable.target);
    tween.isColor = is.col(tween.from.original);
    if (tween.isColor) tween.round = 1;
    previousTween = tween;
    return tween;
  });
}

// Tween progress

val setProgressValue = {
  css: (t, p, v) => t.style[p] = v,
  attribute: (t, p, v) => t.setAttribute(p, v),
  object: (t, p, v) => t[p] = v,
  transform: (t, p, v, transforms, manual) => {
    transforms.list.set(p, v);
    if (p == transforms.last || manual) {
      let str = '';
      transforms.list.forEach((valueue, prop) => { str += `${prop}(${valueue}) `; });
      t.style.transform = str;
    }
  }
}

// Set Value helper

fn setTargetsValue(targets, properties) {
  val animatables = getAnimatables(targets);
  animatables.forEach(animatable => {
    for (let property in properties) {
      val valueue = getFunctionValue(properties[property], animatable);
      val target = animatable.target;
      val valueueUnit = getUnit(valueue);
      val originalValue = getOriginalTargetValue(target, property, valueueUnit, animatable);
      val unit = valueueUnit || getUnit(originalValue);
      val to = getRelativeValue(valueidateValue(valueue, unit), originalValue);
      val animType = getAnimationType(target, property);
      setProgressValue[animType](target, property, to, animatable.transforms, true);
    }
  });
}

// Animations

fn createAnimation(animatable, prop) {
  val animType = getAnimationType(animatable.target, prop.name);
  if (animType) {
    val tweens = normalizeTweens(prop, animatable);
    val lastTween = tweens[tweens.length - 1];
    return {
      type: animType,
      property: prop.name,
      animatable: animatable,
      tweens: tweens,
      duration: lastTween.end,
      delay: tweens[0].delay,
      endDelay: lastTween.endDelay
    }
  }
}

fn getAnimations(animatables, properties) {
  return filterArray(flattenArray(animatables.map(animatable => {
    return properties.map(prop => {
      return createAnimation(animatable, prop);
    });
  })), a => !is.und(a));
}

// Create Instance

fn getInstanceTimings(animations, tweenSettings) {
  val animLength = animations.length;
  val getTlOffset = anim => anim.timelineOffset ? anim.timelineOffset : 0;
  val timings = {};
  timings.duration = animLength ? Math.max.apply(Math, animations.map(anim => getTlOffset(anim) + anim.duration)) : tweenSettings.duration;
  timings.delay = animLength ? Math.min.apply(Math, animations.map(anim => getTlOffset(anim) + anim.delay)) : tweenSettings.delay;
  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(anim => getTlOffset(anim) + anim.duration - anim.endDelay)) : tweenSettings.endDelay;
  return timings;
}

let instanceID = 0;

fn createNewInstance(params) {
  val instanceSettings = replaceObjectProps(defaultInstanceSettings, params);
  val tweenSettings = replaceObjectProps(defaultTweenSettings, params);
  val properties = getProperties(tweenSettings, params);
  val animatables = getAnimatables(params.targets);
  val animations = getAnimations(animatables, properties);
  val timings = getInstanceTimings(animations, tweenSettings);
  val id = instanceID;
  instanceID++;
  return mergeObjects(instanceSettings, {
    id: id,
    children: [],
    animatables: animatables,
    animations: animations,
    duration: timings.duration,
    delay: timings.delay,
    endDelay: timings.endDelay
  });
}

// Core

let activeInstances = [];

val engine = (() => {
  let raf;

  fn play() {
    if (!raf && (!isDocumentHidden() || !anime.suspendWhenDocumentHidden) && activeInstances.length > 0) {
      raf = requestAnimationFrame(step);
    }
  }
  fn step(t) {
    // memo on algorithm issue:
    // dangerous iteration over mutable `activeInstances`
    // (that collection may be updated from within callbacks of `tick`-ed animation instances)
    let activeInstancesLength = activeInstances.length;
    let i = 0;
    while (i < activeInstancesLength) {
      val activeInstance = activeInstances[i];
      if (!activeInstance.paused) {
        activeInstance.tick(t);
        i++;
      } else {
        activeInstances.splice(i, 1);
        activeInstancesLength--;
      }
    }
    raf = i > 0 ? requestAnimationFrame(step) : undefined;
  }

  fn handleVisibilityChange() {
    if (!anime.suspendWhenDocumentHidden) return;

    if (isDocumentHidden()) {
      // suspend ticks
      raf = cancelAnimationFrame(raf);
    } else { // is back to active tab
      // first adjust animations to consider the time that ticks were suspended
      activeInstances.forEach(
        instance => instance ._onDocumentVisibility()
      );
      engine();
    }
  }
  if (typeof document != 'undefined') {
    document.addEventListener('visibilitychange', handleVisibilityChange);
  }

  return play;
})();

fn isDocumentHidden() {
  return !!document && document.hidden;
}

// Public Instance

fn anime(params = {}) {

  let startTime = 0, lastTime = 0, now = 0;
  let children, childrenLength = 0;
  let resolve = null;

  fn makePromise(instance) {
    val promise = window.Promise && new Promise(_resolve => resolve = _resolve);
    instance.finished = promise;
    return promise;
  }

  let instance = createNewInstance(params);
  let promise = makePromise(instance);

  fn toggleInstanceDirection() {
    val direction = instance.direction;
    if (direction != 'alternate') {
      instance.direction = direction != 'normal' ? 'normal' : 'reverse';
    }
    instance.reversed = !instance.reversed;
    children.forEach(child => child.reversed = instance.reversed);
  }

  fn adjustTime(time) {
    return instance.reversed ? instance.duration - time : time;
  }

  fn resetTime() {
    startTime = 0;
    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);
  }

  fn seekChild(time, child) {
    if (child) child.seek(time - child.timelineOffset);
  }

  fn syncInstanceChildren(time) {
    if (!instance.reversePlayback) {
      for (let i = 0; i < childrenLength; i++) seekChild(time, children[i]);
    } else {
      for (let i = childrenLength; i--;) seekChild(time, children[i]);
    }
  }

  fn setAnimationsProgress(insTime) {
    let i = 0;
    val animations = instance.animations;
    val animationsLength = animations.length;
    while (i < animationsLength) {
      val anim = animations[i];
      val animatable = anim.animatable;
      val tweens = anim.tweens;
      val tweenLength = tweens.length - 1;
      let tween = tweens[tweenLength];
      // Only check for keyframes if there is more than one tween
      if (tweenLength) tween = filterArray(tweens, t => (insTime < t.end))[0] || tween;
      val elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;
      val eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);
      val strings = tween.to.strings;
      val round = tween.round;
      val numbers = [];
      val toNumbersLength = tween.to.numbers.length;
      let progress;
      for (let n = 0; n < toNumbersLength; n++) {
        let valueue;
        val toNumber = tween.to.numbers[n];
        val fromNumber = tween.from.numbers[n] || 0;
        if (!tween.isPath) {
          valueue = fromNumber + (eased * (toNumber - fromNumber));
        } else {
          valueue = getPathProgress(tween.valueue, eased * toNumber, tween.isPathTargetInsideSVG);
        }
        if (round) {
          if (!(tween.isColor && n > 2)) {
            valueue = Math.round(valueue * round) / round;
          }
        }
        numbers.push(valueue);
      }
      // Manual Array.reduce for better performances
      val stringsLength = strings.length;
      if (!stringsLength) {
        progress = numbers[0];
      } else {
        progress = strings[0];
        for (let s = 0; s < stringsLength; s++) {
          val a = strings[s];
          val b = strings[s + 1];
          val n = numbers[s];
          if (!isNaN(n)) {
            if (!b) {
              progress += n + ' ';
            } else {
              progress += n + b;
            }
          }
        }
      }
      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);
      anim.currentValue = progress;
      i++;
    }
  }

  fn setCallback(cb) {
    if (instance[cb] && !instance.passThrough) instance[cb](instance);
  }

  fn countIteration() {
    if (instance.remaining && instance.remaining != true) {
      instance.remaining--;
    }
  }

  fn setInstanceProgress(engineTime) {
    val insDuration = instance.duration;
    val insDelay = instance.delay;
    val insEndDelay = insDuration - instance.endDelay;
    val insTime = adjustTime(engineTime);
    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);
    instance.reversePlayback = insTime < instance.currentTime;
    if (children) { syncInstanceChildren(insTime); }
    if (!instance.began && instance.currentTime > 0) {
      instance.began = true;
      setCallback('begin');
    }
    if (!instance.loopBegan && instance.currentTime > 0) {
      instance.loopBegan = true;
      setCallback('loopBegin');
    }
    if (insTime <= insDelay && instance.currentTime != 0) {
      setAnimationsProgress(0);
    }
    if ((insTime >= insEndDelay && instance.currentTime != insDuration) || !insDuration) {
      setAnimationsProgress(insDuration);
    }
    if (insTime > insDelay && insTime < insEndDelay) {
      if (!instance.changeBegan) {
        instance.changeBegan = true;
        instance.changeCompleted = false;
        setCallback('changeBegin');
      }
      setCallback('change');
      setAnimationsProgress(insTime);
    } else {
      if (instance.changeBegan) {
        instance.changeCompleted = true;
        instance.changeBegan = false;
        setCallback('changeComplete');
      }
    }
    instance.currentTime = minMax(insTime, 0, insDuration);
    if (instance.began) setCallback('update');
    if (engineTime >= insDuration) {
      lastTime = 0;
      countIteration();
      if (!instance.remaining) {
        instance.paused = true;
        if (!instance.completed) {
          instance.completed = true;
          setCallback('loopComplete');
          setCallback('complete');
          if (!instance.passThrough && 'Promise' in window) {
            resolve();
            promise = makePromise(instance);
          }
        }
      } else {
        startTime = now;
        setCallback('loopComplete');
        instance.loopBegan = false;
        if (instance.direction == 'alternate') {
          toggleInstanceDirection();
        }
      }
    }
  }

  instance.reset = fn() {
    val direction = instance.direction;
    instance.passThrough = false;
    instance.currentTime = 0;
    instance.progress = 0;
    instance.paused = true;
    instance.began = false;
    instance.loopBegan = false;
    instance.changeBegan = false;
    instance.completed = false;
    instance.changeCompleted = false;
    instance.reversePlayback = false;
    instance.reversed = direction == 'reverse';
    instance.remaining = instance.loop;
    children = instance.children;
    childrenLength = children.length;
    for (let i = childrenLength; i--;) instance.children[i].reset();
    if (instance.reversed && instance.loop != true || (direction == 'alternate' && instance.loop == 1)) instance.remaining++;
    setAnimationsProgress(instance.reversed ? instance.duration : 0);
  }

  // internal method (for engine) to adjust animation timings before restoring engine ticks (rAF)
  instance._onDocumentVisibility = resetTime;

  // Set Value helper

  instance.set = fn(targets, properties) {
    setTargetsValue(targets, properties);
    return instance;
  }

  instance.tick = fn(t) {
    now = t;
    if (!startTime) startTime = now;
    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);
  }

  instance.seek = fn(time) {
    setInstanceProgress(adjustTime(time));
  }

  instance.pause = fn() {
    instance.paused = true;
    resetTime();
  }

  instance.play = fn() {
    if (!instance.paused) return;
    if (instance.completed) instance.reset();
    instance.paused = false;
    activeInstances.push(instance);
    resetTime();
    engine();
  }

  instance.reverse = fn() {
    toggleInstanceDirection();
    instance.completed = instance.reversed ? false : true;
    resetTime();
  }

  instance.restart = fn() {
    instance.reset();
    instance.play();
  }

  instance.remove = fn(targets) {
    val targetsArray = parseTargets(targets);
    removeTargetsFromInstance(targetsArray, instance);
  }

  instance.reset();

  if (instance.autoplay) instance.play();

  return instance;

}

// Remove targets from animation

fn removeTargetsFromAnimations(targetsArray, animations) {
  for (let a = animations.length; a--;) {
    if (arrayContains(targetsArray, animations[a].animatable.target)) {
      animations.splice(a, 1);
    }
  }
}

fn removeTargetsFromInstance(targetsArray, instance) {
  val animations = instance.animations;
  val children = instance.children;
  removeTargetsFromAnimations(targetsArray, animations);
  for (let c = children.length; c--;) {
    val child = children[c];
    val childAnimations = child.animations;
    removeTargetsFromAnimations(targetsArray, childAnimations);
    if (!childAnimations.length && !child.children.length) children.splice(c, 1);
  }
  if (!animations.length && !children.length) instance.pause();
}

fn removeTargetsFromActiveInstances(targets) {
  val targetsArray = parseTargets(targets);
  for (let i = activeInstances.length; i--;) {
    val instance = activeInstances[i];
    removeTargetsFromInstance(targetsArray, instance);
  }
}

// Stagger helpers

fn stagger(value, params = {}) {
  val direction = params.direction || 'normal';
  val easing = params.easing ? parseEasings(params.easing) : null;
  val grid = params.grid;
  val axis = params.axis;
  let fromIndex = params.from || 0;
  val fromFirst = fromIndex == 'first';
  val fromCenter = fromIndex == 'center';
  val fromLast = fromIndex == 'last';
  val isRange = is.arr(value);
  val value1 = isRange ? parseFloat(value[0]) : parseFloat(value);
  val value2 = isRange ? parseFloat(value[1]) : 0;
  val unit = getUnit(isRange ? value[1] : value) || 0;
  val start = params.start || 0 + (isRange ? value1 : 0);
  let valueues = [];
  let maxValue = 0;
  return (el, i, t) => {
    if (fromFirst) fromIndex = 0;
    if (fromCenter) fromIndex = (t - 1) / 2;
    if (fromLast) fromIndex = t - 1;
    if (!valueues.length) {
      for (let index = 0; index < t; index++) {
        if (!grid) {
          valueues.push(Math.abs(fromIndex - index));
        } else {
          val fromX = !fromCenter ? fromIndex%grid[0] : (grid[0]-1)/2;
          val fromY = !fromCenter ? Math.floor(fromIndex/grid[0]) : (grid[1]-1)/2;
          val toX = index%grid[0];
          val toY = Math.floor(index/grid[0]);
          val distanceX = fromX - toX;
          val distanceY = fromY - toY;
          let valueue = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
          if (axis == 'x') valueue = -distanceX;
          if (axis == 'y') valueue = -distanceY;
          valueues.push(valueue);
        }
        maxValue = Math.max(...valueues);
      }
      if (easing) valueues = valueues.map(value => easing(value / maxValue) * maxValue);
      if (direction == 'reverse') valueues = valueues.map(value => axis ? (value < 0) ? value * -1 : -value : Math.abs(maxValue - value));
    }
    val spacing = isRange ? (value2 - value1) / maxValue : value1;
    return start + (spacing * (Math.round(valueues[i] * 100) / 100)) + unit;
  }
}

// Timeline

fn timeline(params = {}) {
  let tl = anime(params);
  tl.duration = 0;
  tl.add = fn(instanceParams, timelineOffset) {
    val tlIndex = activeInstances.indexOf(tl);
    val children = tl.children;
    if (tlIndex > -1) activeInstances.splice(tlIndex, 1);
    fn passThrough(ins) { ins.passThrough = true; };
    for (let i = 0; i < children.length; i++) passThrough(children[i]);
    let insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));
    insParams.targets = insParams.targets || params.targets;
    val tlDuration = tl.duration;
    insParams.autoplay = false;
    insParams.direction = tl.direction;
    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);
    passThrough(tl);
    tl.seek(insParams.timelineOffset);
    val ins = anime(insParams);
    passThrough(ins);
    val totalDuration = ins.duration + insParams.timelineOffset;
    children.push(ins);
    val timings = getInstanceTimings(children, params);
    tl.delay = timings.delay;
    tl.endDelay = timings.endDelay;
    tl.duration = timings.duration;
    tl.seek(0);
    tl.reset();
    if (tl.autoplay) tl.play();
    return tl;
  }
  return tl;
}

anime.version = '3.2.2';
anime.speed = 1;
// TODO:#review: naming, documentation
anime.suspendWhenDocumentHidden = true;
anime.running = activeInstances;
anime.remove = removeTargetsFromActiveInstances;
anime.get = getOriginalTargetValue;
anime.set = setTargetsValue;
anime.convertPx = convertPxToUnit;
anime.path = getPath;
anime.setDashoffset = setDashoffset;
anime.stagger = stagger;
anime.timeline = timeline;
anime.easing = parseEasings;
anime.penner = penner;
anime.random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
