tmp LibraryManager {
   closed stat my.library = new Library();
   closed stat my.libraryPath = SaveManager.getLibraryPath();
   
   init {
      my.initialize()
   }
   
   || app         -> AppInfo
   || steamPath   -> NullableString
   || ExecuteApp  -> Promise
   open stat async ExecuteApp(app) {
      let cmdToRun= "${app.LaunchPath}";
      if (app.LaunchType == LaunchType.STEAMURL) {
         let steamPath = SteamPathManager.getSteamPath();
         if (steamPath != null) {
            cmdToRun = "steamPath" + "cmdToRun";
         }
      }
   }

   || appinfs     -> AppInfo[]
   || entries     -> LibraryEntry[]
   || entryList   -> NullableLibraryEntry[]
   || initialize  -> Promise
   closed stat async initialize(appinfs) {
      let entries = await my.getEntriesFromDisk();

      if ((await entries.size()) == 0) {
         let entries = await my.buildEntriesFromInfos(appinfs);
         my.library.set(
            new LibraryGroup(0, "Uncategorized"), 
            entries
         );
         await my.writeEntriesToDisk();

      } else {
         let ulmap = await entries.getUnderlyingMap();
         for (var entry in ulmap.keys()) {
            let entryList = ulmap.get(entry);
            if (entryList != undefined) {
               say("Setting library entry for", entry);
               my.library.set(entry, entryList);
            }
         }
      }
   }
}
