{
   "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
   "name": "Raven",
   "patterns": [
      {
         "include": "#comments"
      },
      {
         "include": "#keywords"
      },
      {
         "include": "#functions"
      },
      {
         "include": "#strings"
      },
      {
         "include": "#template-literals"
      },
      {
         "include": "#try-catch"
      },
      {
         "include": "#type-hints"
      },
      {
         "include": "#operators"
      },
      {
         "include": "#primitives"
      },
      {
         "include": "#builtin-literals"
      },
      {
         "include": "#self-references"
      }
   ],
   "repository": {
      "comments": {
         "patterns": [
            {
               "name": "comment.line.double-slash.raven",
               "match": "//.*$"
            },
            {
               "name": "comment.block.raven",
               "begin": "/\\*",
               "end": "\\*/"
            },
            {
               "name": "comment.line.typehint.raven",
               "match": "\\|\\|\\s*\\w+\\s*->\\s*\\w+"
            }
         ]
      },
      "keywords": {
         "patterns": [
            {
               "name": "keyword.control.raven",
               "match": "\\b(if|while|for|strict|continue|open|map|join|filter|abbrev|closed|stat|return|fn|val|xval|xset|xlet|typeof|switch|case|die|tmp|init|elif|else|raw|new|enum|class|init|async|await|wait|win|doc|let|var|say|warn|import|do|then|end|break|in|of|use|expose|onready|typeof)\\b"
            }
         ]
      },
      "functions": {
         "patterns": [
            {
               "name": "entity.name.function.raven",
               "match": "\\bfn\\s+\\w+\\s*\\([^\\)]*\\)"
            }
         ]
      },
      "strings": {
         "name": "string.quoted.double.raven",
         "begin": "\"",
         "end": "\"",
         "patterns": [
            {
               "name": "constant.character.escape.raven",
               "match": "\\\\."
            }
         ]
      },
      "template-literals": {
         "name": "string.quoted.template.raven",
         "begin": "@\"",
         "end": "\"",
         "patterns": [
            {
               "name": "constant.character.escape.raven",
               "match": "\\\\."
            }
         ]
      },
      "try-catch": {
         "patterns": [
            {
               "name": "keyword.control.trycatch.raven",
               "match": "\\b(try|die)\\b"
            }
         ]
      },
      "type-hints": {
         "patterns": [
            {
               "name": "meta.typehint.raven",
               "begin": "\\|\\|\\s*\\w+\\s*->\\s*\\w+",
               "end": "(?=\\n|$)",
               "patterns": [
                  {
                     "name": "keyword.operator.typehint.raven",
                     "match": "->"
                  },
                  {
                     "name": "variable.parameter.typehint.raven",
                     "match": "\\|\\|\\s*\\w+",
                     "captures": {
                        "0": {
                           "name": "variable.parameter.typehint.raven"
                        }
                     }
                  },
                  {
                     "name": "storage.type.typehint.raven",
                     "match": "\\w+$"
                  }
               ]
            }
         ]
      },
      "operators": {
         "patterns": [
            {
               "name": "keyword.operator.raven",
               "match": "\\b(==|!=|<=|>=|<|>|=|\\+|-|\\*|/|%|&&|\\|\\|)\\b"
            }
         ]
      },
      "primitives": {
         "patterns": [
            {
               "name": "support.type.primitive.raven",
               "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
            }
         ]
      },
      "builtin-literals": {
         "patterns": [
            {
               "name": "support.type.builtin.raven",
               "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(true|false|undefined|null)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
            }
         ]
      },
      "self-references": {
         "patterns": [
            {
               "name": "variable.language.self.raven",
               "match": "\\bmy\\b(?=\\.)"
            }
         ]
      }
   },
   "scopeName": "source.raven"
}
