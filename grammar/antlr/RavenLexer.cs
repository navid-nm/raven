//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Raven.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RavenLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13"
	};


	public RavenLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RavenLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fn'", "'('", "')'", "'{'", "'}'", "'let'", "'='", "'0'", "';'", 
		"'import'", "'onready'", "'||'", "'->'", "'[a-zA-Z_][a-zA-Z0-9_]*'"
	};
	private static readonly string[] _SymbolicNames = {
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Raven.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RavenLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,94,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,
		0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,1,0,0,93,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,
		0,3,32,1,0,0,0,5,34,1,0,0,0,7,36,1,0,0,0,9,38,1,0,0,0,11,40,1,0,0,0,13,
		44,1,0,0,0,15,46,1,0,0,0,17,48,1,0,0,0,19,50,1,0,0,0,21,57,1,0,0,0,23,
		65,1,0,0,0,25,68,1,0,0,0,27,71,1,0,0,0,29,30,5,102,0,0,30,31,5,110,0,0,
		31,2,1,0,0,0,32,33,5,40,0,0,33,4,1,0,0,0,34,35,5,41,0,0,35,6,1,0,0,0,36,
		37,5,123,0,0,37,8,1,0,0,0,38,39,5,125,0,0,39,10,1,0,0,0,40,41,5,108,0,
		0,41,42,5,101,0,0,42,43,5,116,0,0,43,12,1,0,0,0,44,45,5,61,0,0,45,14,1,
		0,0,0,46,47,5,48,0,0,47,16,1,0,0,0,48,49,5,59,0,0,49,18,1,0,0,0,50,51,
		5,105,0,0,51,52,5,109,0,0,52,53,5,112,0,0,53,54,5,111,0,0,54,55,5,114,
		0,0,55,56,5,116,0,0,56,20,1,0,0,0,57,58,5,111,0,0,58,59,5,110,0,0,59,60,
		5,114,0,0,60,61,5,101,0,0,61,62,5,97,0,0,62,63,5,100,0,0,63,64,5,121,0,
		0,64,22,1,0,0,0,65,66,5,124,0,0,66,67,5,124,0,0,67,24,1,0,0,0,68,69,5,
		45,0,0,69,70,5,62,0,0,70,26,1,0,0,0,71,72,5,91,0,0,72,73,5,97,0,0,73,74,
		5,45,0,0,74,75,5,122,0,0,75,76,5,65,0,0,76,77,5,45,0,0,77,78,5,90,0,0,
		78,79,5,95,0,0,79,80,5,93,0,0,80,81,5,91,0,0,81,82,5,97,0,0,82,83,5,45,
		0,0,83,84,5,122,0,0,84,85,5,65,0,0,85,86,5,45,0,0,86,87,5,90,0,0,87,88,
		5,48,0,0,88,89,5,45,0,0,89,90,5,57,0,0,90,91,5,95,0,0,91,92,5,93,0,0,92,
		93,5,42,0,0,93,28,1,0,0,0,1,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
