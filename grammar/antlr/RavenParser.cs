//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Raven.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RavenParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_identifier = 2;
	public static readonly string[] ruleNames = {
		"program", "statement", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fn'", "'('", "')'", "'{'", "'}'", "'let'", "'='", "'0'", "';'", 
		"'import'", "'onready'", "'||'", "'->'", "'[a-zA-Z_][a-zA-Z0-9_]*'"
	};
	private static readonly string[] _SymbolicNames = {
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Raven.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RavenParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RavenParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RavenParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRavenListener typedListener = listener as IRavenListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRavenListener typedListener = listener as IRavenListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7234L) != 0)) {
				{
				{
				State = 6;
				statement();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRavenListener typedListener = listener as IRavenListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRavenListener typedListener = listener as IRavenListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12;
				Match(T__0);
				State = 13;
				identifier();
				State = 14;
				Match(T__1);
				State = 15;
				Match(T__2);
				State = 16;
				Match(T__3);
				State = 17;
				Match(T__4);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19;
				Match(T__5);
				State = 20;
				identifier();
				State = 21;
				Match(T__6);
				State = 22;
				Match(T__7);
				State = 23;
				Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 25;
				Match(T__9);
				State = 26;
				identifier();
				State = 27;
				Match(T__8);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 29;
				Match(T__10);
				State = 30;
				Match(T__1);
				State = 31;
				Match(T__0);
				State = 32;
				Match(T__1);
				State = 33;
				Match(T__2);
				State = 34;
				Match(T__3);
				State = 35;
				Match(T__4);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 5);
				{
				State = 36;
				Match(T__11);
				State = 37;
				identifier();
				State = 38;
				Match(T__12);
				State = 39;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRavenListener typedListener = listener as IRavenListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRavenListener typedListener = listener as IRavenListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,46,2,0,7,0,2,1,7,1,2,2,7,2,1,0,5,0,8,8,0,10,0,12,0,11,9,0,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,42,8,1,1,2,1,2,1,2,0,0,3,0,
		2,4,0,0,47,0,9,1,0,0,0,2,41,1,0,0,0,4,43,1,0,0,0,6,8,3,2,1,0,7,6,1,0,0,
		0,8,11,1,0,0,0,9,7,1,0,0,0,9,10,1,0,0,0,10,1,1,0,0,0,11,9,1,0,0,0,12,13,
		5,1,0,0,13,14,3,4,2,0,14,15,5,2,0,0,15,16,5,3,0,0,16,17,5,4,0,0,17,18,
		5,5,0,0,18,42,1,0,0,0,19,20,5,6,0,0,20,21,3,4,2,0,21,22,5,7,0,0,22,23,
		5,8,0,0,23,24,5,9,0,0,24,42,1,0,0,0,25,26,5,10,0,0,26,27,3,4,2,0,27,28,
		5,9,0,0,28,42,1,0,0,0,29,30,5,11,0,0,30,31,5,2,0,0,31,32,5,1,0,0,32,33,
		5,2,0,0,33,34,5,3,0,0,34,35,5,4,0,0,35,42,5,5,0,0,36,37,5,12,0,0,37,38,
		3,4,2,0,38,39,5,13,0,0,39,40,3,4,2,0,40,42,1,0,0,0,41,12,1,0,0,0,41,19,
		1,0,0,0,41,25,1,0,0,0,41,29,1,0,0,0,41,36,1,0,0,0,42,3,1,0,0,0,43,44,5,
		14,0,0,44,5,1,0,0,0,2,9,41
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
