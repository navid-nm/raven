//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Raven.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRavenListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RavenBaseListener : IRavenListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] RavenParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] RavenParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] RavenParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] RavenParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.functionDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDef([NotNull] RavenParser.FunctionDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.functionDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDef([NotNull] RavenParser.FunctionDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.variableDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDef([NotNull] RavenParser.VariableDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.variableDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDef([NotNull] RavenParser.VariableDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportStatement([NotNull] RavenParser.ImportStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportStatement([NotNull] RavenParser.ImportStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.typeHint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeHint([NotNull] RavenParser.TypeHintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.typeHint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeHint([NotNull] RavenParser.TypeHintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.abbreviation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAbbreviation([NotNull] RavenParser.AbbreviationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.abbreviation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAbbreviation([NotNull] RavenParser.AbbreviationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.abbreviationDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAbbreviationDef([NotNull] RavenParser.AbbreviationDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.abbreviationDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAbbreviationDef([NotNull] RavenParser.AbbreviationDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.abbreviationUsage"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAbbreviationUsage([NotNull] RavenParser.AbbreviationUsageContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.abbreviationUsage"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAbbreviationUsage([NotNull] RavenParser.AbbreviationUsageContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.asyncFunction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAsyncFunction([NotNull] RavenParser.AsyncFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.asyncFunction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAsyncFunction([NotNull] RavenParser.AsyncFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] RavenParser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] RavenParser.CallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.errorHandling"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterErrorHandling([NotNull] RavenParser.ErrorHandlingContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.errorHandling"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitErrorHandling([NotNull] RavenParser.ErrorHandlingContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.onReady"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOnReady([NotNull] RavenParser.OnReadyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.onReady"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOnReady([NotNull] RavenParser.OnReadyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] RavenParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] RavenParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] RavenParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] RavenParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.binaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOp([NotNull] RavenParser.BinaryOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.binaryOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOp([NotNull] RavenParser.BinaryOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RavenParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] RavenParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RavenParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] RavenParser.IdentifierContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
